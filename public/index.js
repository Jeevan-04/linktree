document.addEventListener('DOMContentLoaded', () => {
    const playAgainButton = document.getElementById('play-again');

    // Tic-Tac-Toe Game
    const board = document.querySelector('.board');
    const statusMessage = document.getElementById('status-message');
    const squares = document.querySelectorAll('.square');
    
    let boardState = Array(9).fill(null);
    let currentPlayer = 'X'; // User is 'X', Jeevan (AI) is 'O'
    let gameActive = true; // Track if the game is active

    function checkWinner() {
        const winPatterns = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],
            [0, 3, 6], [1, 4, 7], [2, 5, 8],
            [0, 4, 8], [2, 4, 6]
        ];
        for (const [a, b, c] of winPatterns) {
            if (boardState[a] && boardState[a] === boardState[b] && boardState[a] === boardState[c]) {
                return boardState[a];
            }
        }
        return boardState.includes(null) ? null : 'Tie';
    }

    function makeMove(index, player) {
        if (boardState[index] === null) {
            boardState[index] = player;
            squares[index].classList.add(player.toLowerCase());
            squares[index].textContent = player;
        }
    }

    function handleSquareClick(event) {
        if (!gameActive) return; // Ignore clicks if the game is not active
        const index = event.target.dataset.index;
        if (!boardState[index] && currentPlayer === 'X') {
            makeMove(index, 'X');
            const winner = checkWinner();
            if (winner) {
                if (winner === 'Tie') {
                    statusMessage.textContent = "It's a tie!";
                } else {
                    statusMessage.textContent = `You won!!!`;
                }
                gameActive = false; // Disable further moves
                playAgainButton.style.display = 'inline'; // Show the play again button
                return;
            }
            currentPlayer = 'O';
            statusMessage.textContent = "Jeevan's turn...";
            setTimeout(computerMove, 500);
        }
    }

    function computerMove() {
        if (!gameActive) return; // Ignore computer move if the game is not active
        const availableMoves = boardState.map((value, index) => value === null ? index : null).filter(value => value !== null);
        if (availableMoves.length > 0) {
            const move = availableMoves[Math.floor(Math.random() * availableMoves.length)];
            makeMove(move, 'O');
            const winner = checkWinner();
            if (winner) {
                if (winner === 'Tie') {
                    statusMessage.textContent = "It's a tie!";
                } else {
                    statusMessage.textContent = `Jeevan won!!!`;
                }
                gameActive = false; // Disable further moves
                playAgainButton.style.display = 'inline'; // Show the play again button
                return;
            }
            currentPlayer = 'X';
            statusMessage.textContent = "Your turn!";
        }
    }

    function resetGame() {
        boardState = Array(9).fill(null);
        currentPlayer = 'X';
        gameActive = true; // Reset game active status
        squares.forEach(square => {
            square.classList.remove('x', 'o');
            square.textContent = '';
        });
        statusMessage.textContent = "Your turn!";
        playAgainButton.style.display = 'none'; // Hide the play again button
    }

    squares.forEach(square => square.addEventListener('click', handleSquareClick));
    playAgainButton.addEventListener('click', resetGame);
});


document.addEventListener('DOMContentLoaded', () => {
    const toggleButton = document.getElementById('toggle-button');
    const body = document.body;
    const playAgainButton = document.getElementById('play-again');

    // Toggle between dark mode and light mode
    toggleButton.addEventListener('click', () => {
        body.classList.toggle('dark-mode');
        const isDarkMode = body.classList.contains('dark-mode');
        localStorage.setItem('dark-mode', isDarkMode);
        toggleButton.textContent = isDarkMode ? 'ЁЯМХ' : 'ЁЯМЩ'; // Toggle icon

        // Image switching based on the mode
        const imageElement = document.querySelector('.imag'); // assuming .imag is the class for the image
        if (isDarkMode) {
            imageElement.src = './dark.png'; // Change to your dark mode image
        } else {
            imageElement.src = './image.png'; // Change to your light mode image
        }
    });

    // Retrieve and set the initial mode from localStorage
    const savedMode = localStorage.getItem('dark-mode') === 'true';
    if (savedMode) {
        body.classList.add('dark-mode');
        toggleButton.textContent = 'ЁЯМХ'; // Moon icon for dark mode
        document.querySelector('.imag').src = './dark.png'; // Set initial image for dark mode
    } else {
        document.querySelector('.imag').src = './image.png'; // Set initial image for light mode
    }
});

// Array of quotes, each quote includes the Sanskrit and translated versions.
const quotes = [
    {
        sanskrit: 'рдХрд╛рдХрдГ рдХреГрд╖реНрдгрдГ рдкрд┐рдХрдГ рдХреГрд╖реНрдгрдГ рдХреЛ рднреЗрджрдГ рдкрд┐рдХрдХрд╛рдХрдпреЛрдГ ред рд╡рд╕рдиреНрддрд╕рдордпреЗ рдкреНрд░рд╛рдкреНрддреЗ рдХрд╛рдХрдГ рдХрд╛рдХрдГ рдкрд┐рдХрдГ рдкрд┐рдХрдГ рее',
        translation: 'The crow is black, and the cuckoo is black. What is the difference between the two? It is when spring arrives that the crow is identified as the crow, and the cuckoo, the cuckoo.'
    },
    {
        sanskrit: 'рд╕рдЬреНрдЬрдирд╕реНрдп рд╣реГрджрдпрдВ рдирд╡рдиреАрддрдВ рдпрджреНрд╡рджрдиреНрддрд┐ рдХрд╡рдпрд╕реНрддрджрд▓реАрдХрдореН ред рдЕрдиреНрдпрджреЗрд╣рд╡рд┐рд▓рд╕рддреНрдкрд░рд┐рддрд╛рдкрд╛рддреН рд╕рдЬреНрдЬрдиреЛ рджреНрд░рд╡рддрд┐, рдиреЛ рдирд╡рдиреАрддрдореН рее',
        translation: 'Poets say that the heart of a good man is like butter, but that is not correct. The heat residing in another body does not melt butter, but it does melt the good man.'
    },
    {
        sanskrit: 'рд╕реНрд╡рдпрдВ рдкрдЮреНрдЪрдореБрдЦрдГ рдкреБрддреНрд░реМ рдЧрдЬрд╛рдирдирд╖рдбрд╛рдирдиреМ ред рджрд┐рдЧрдореНрдмрд░рдГ рдХрдердВ рдЬреАрд╡реЗрддреН рдЕрдиреНрдирдкреВрд░реНрдгрд╛ рди рдЪреЗрджреНрдЧреГрд╣реЗ рее',
        translation: 'Five mouthed himself (Shiva), and sons: the elephant-mouthed (Ganesh) and the one with six mouths (Kartikeya). How would Shiva survive if Annapurna (Parvati) was not at home?'
    },
    {
        sanskrit: 'рд╕реНрд╡рдпрдВ рдорд╣реЗрд╢рдГ рд╢рд╡реНрд╢реБрд░реЛ рдирдЧреЗрд╢рдГ рд╕рдЦрд╛ рдзрдиреЗрд╢рд╢реНрдЪ рд╕реБрддреЛ рдЧрдгреЗрд╢рдГ ред рддрдерд╛рдкрд┐ рднрд┐рдХреНрд╖рд╛рдЯрдирдореЗрд╡ рд╢рдореНрднреЛрдГ рдмрд▓реАрдпрд╕реА рдХреЗрд╡рд▓рдореАрд╢реНрд╡рд░реЗрдЪреНрдЫрд╛ рее',
        translation: 'Himself the great lord, his father-in-law the king of mountains, his friend the king of wealth, and his son the lord of the gaNas. Even then, roaming around begging for food is ShivaтАЩs destiny; only GodтАЩs wish is powerful.'
    },
    {
        sanskrit: 'рд╕рд╛рд╣рд┐рддреНрдп рд╕рдВрдЧреАрдд рдХрд▓рд╛ рд╡рд┐рд╣реАрдирдГ рд╕рд╛рдХреНрд╖рд╛рддреН рдкрд╢реБрдГ рдкреБрдЫ рд╡рд┐рд╖рд╛рдг рд╣реАрдирдГ ред рддреГрдгрдВ рди рдЦрд╛рджрдиреНрдирдкрд┐ рдЬреАрд╡рдорд╛рдирдГ рддрджреН рднрд╛рдЧрдзреЗрдпрдВ рдкрд░рдордВ рдкрд╖реВрдгрд╛рдореН рее',
        translation: 'The man without love for literature, music, or the arts is indeed an animal without a tail or horns. The fact that he survives even without eating grass is indeed a great piece of luck for other animals.'
    },
    {
        sanskrit: 'рдкрд┐ рд╕реНрд╡рд░реНрдгрдордпреА рд▓рдЩреНрдХрд╛ рди рдореЗ рд▓рдХреНрд╖реНрдордг рд░реЛрдЪрддреЗ ред рдЬрдирдиреА рдЬрдиреНрдорднреВрдорд┐рд╢реНрдЪ рд╕реНрд╡рд░реНрдЧрд╛рджрдкрд┐ рдЧрд░реАрдпрд╕реА рее',
        translation: 'O LakShmana, even though Lanka is a golden land, it does not appeal to me. One\'s mother and motherland are greater than heaven itself.'
    },
    {
        sanskrit: 'рдкрд░реЛрдкрдХрд╛рд░рд╛рдп рдлрд▓рдиреНрддрд┐ рд╡реГрдХреНрд╖рд╛рдГ рдкрд░реЛрдкрдХрд╛рд░рд╛рдп рд╡рд╣рдиреНрддрд┐ рдирджреНрдпрдГ ред рдкрд░реЛрдкрдХрд╛рд░рд╛рдп рджреБрд╣рдиреНрддрд┐ рдЧрд╛рд╡рдГ рдкрд░реЛрдкрдХрд╛рд░рд╛рд░реНрдердорд┐рджрдВ рд╢рд░реАрд░рдореН рее',
        translation: 'Trees give fruits to assist others. Rivers flow to help others. Cows produce milk to feed others. In the same way, our own human body should also be employed for the assistance of others.'
    },
    {
        sanskrit: 'рдЕрдордиреНрддреНрд░рдореН рдЕрдХреНрд╖рд░рдВ рдирд╛рд╕реНрддрд┐ рдирд╛рд╕реНрддрд┐ рдореВрд▓рдордиреМрд╖рджрдореН ред рдЕрдпреЛрдЧреНрдпрдГ рдкреБрд░реБрд╖реЛ рдирд╛рд╕реНрддрд┐ рдпреЛрдЬрдХрд╕реНрддрддреНрд░ рджреБрд░реНрд▓рднрдГ рее',
        translation: 'There is no letter in the alphabet that cannot be used in divine poems (mantra). There exists no root which cannot be used as a medicine. Likewise, there is no useless person. The scarcity is for the one who knows how to use them!'
    },
    {
        sanskrit: 'рд╕рдореНрдкреВрд░реНрдгрдХреБрдореНрднреЛ рди рдХрд░реЛрддрд┐ рд╢рдмреНрджрдВ рдЕрд░реНрдзреЛ рдШрдЯреЛ рдШреЛрд╖рдореБрдкреИрддрд┐ рдиреВрдирдВ  ред рд╡рд┐рджреНрд╡рд╛рдиреН рдХреБрд▓реАрдиреЛ рди рдХрд░реЛрддрд┐ рдЧрд░реНрд╡рдВ рдореВрдзрд╛рд╕реНрддреБ рдЬрд▓реНрдкрдиреНрддрд┐ рдЧреБрдгреИрд░реНрд╡рд┐рд╣реАрдирд╛рдГ рее',
        translation: 'A full pot does not make any noise, however, a half-full pot makes noise. A learned respectable person is never vain, but foolish people bereft of good qualities babble incessantly.'
    },
    {
        sanskrit: 'рдЧреБрдгреИрд░реБрддреНрддреБрдВрдЧрддрд╛рдВ рдпрд╛рддрд┐ рдиреЛрддреНрддреБрдВрдЧреЗрдирд╛рд╕рдиреЗрди рд╡реИ ред рдкреНрд░рд╛рд╕рд╛рджрд╢рд┐рдЦрд░рд╕реНрдереЛрд╜рдкрд┐ рдХрд╛рдХреЛ рди рдЧрд░реБрдбрд╛рдпрддреЗ рее',
        translation: 'One achieves greatness because of one&apos;s qualities, not because of a high position. Even  is placed at the top of the palace. a crow does not become an eagle'
    },
    {
        sanskrit: 'рдирд╛рддреНрдпрдиреНрддрдВ рд╕рд░рд▓реИрд░реНрднрд╛рд╡реНрдпрдВ рдЧрддреНрд╡рд╛ рдкрд╢реНрдп рд╡рдирд╕реНрдерд▓реАрдореН ред рдЫрд┐рджреНрдпрдиреНрддреЗ рд╕рд░рд▓рд╛рд╕реНрддрддреНрд░ рдХреБрдмреНрдЬрд╛рд╕реНрддрд┐рд╖реНрдардиреНрддрд┐ рдкрд╛рджрдкрд╛рдГ рее',
        translation: 'Do not be very upright in your dealings, as you would see in forest, the straight trees are cut down while the crooked ones are left standing.'
    },
    {
        sanskrit: 'рдХрд╛рдордзреЗрдиреБрдЧреБрдирд╛ рд╡рд┐рджреНрдпрд╛ рд╣реНрдпрдХрд╛рд▓реЗ рдлрд▓рджрд╛рдпрд┐рдиреАред рдкреНрд░рд╡рд╛рд╕реЗ рдорд╛рддреГрд╕рджреГрд╢реА рд╡рд┐рджреНрдпрд╛ рдЧреБрдкреНрддрдВ рдзрдирдВ рд╕реНрдореГрддрдореНрее',
        translation: 'Learning is like a cow of desire. It, like her, yields in all seasons. Like a mother, it feeds you on your journey, therefore learning is a hidden treasure.'
    },
    {
        sanskrit: 'рдпрдерд╛ рдЪрддреБрд░реНрднрд┐рдГ рдХрдирдХрдВ рдкрд░реАрдХреНрд╖реНрдпрддреЗ рдирд┐рдШрд░реНрд╖рдгрдЪреНрдЫреЗрджрдирддрд╛рдкрддрд╛рдбрдиреИрдГред рддрдерд╛ рдЪрддреБрд░реНрднрд┐рдГ рдкреБрд░реБрд╖рдГ рдкрд░реАрдХреНрд╖реНрдпрддреЗ рддреНрдпрд╛рдЧреЗрди рд╢реАрд▓реЗрди рдЧреБрдгреЗрди рдХрд░реНрдордгрд╛рее',
        translation: 'As gold is tested in four ways by rubbing, cutting, heating and beating тАУ so a man should be tested by these four things: his renunciation, his conduct, his qualities, and his actions.'
    },
    {
        sanskrit: 'рджрд╛рд░рд┐рджреНрд░реНрдпрдирд╛рд╢рдирдВ рджрд╛рдирдВ рд╢реАрд▓рдВ рджреБрд░реНрдЧрддрд┐рдирд╛рд╢рдирдореНред рдЕрдЬреНрдЮрд╛рдирдирд╛рд╢рд┐рдиреА рдкреНрд░рдЬреНрдЮрд╛ рднрд╛рд╡рдирд╛ рднрдпрдирд╛рд╢рд┐рдиреАрее',
        translation: 'Charity puts end to poverty; righteous conduct to misery; discretion to ignorance; and scrutiny to fear.'
    },
    {
        sanskrit: 'рд╕рд░реНрд╡рдВ рдкрд░рд╡рд╢рдВ рджреБрдГрдЦрдВ рд╕рд░реНрд╡рдорд╛рддреНрдорд╡рд╢рдВ рд╕реБрдЦрдореНред рдПрддрджреН рд╡рд┐рджреНрдпрд╛рддреН рд╕рдорд╛рд╕реЗрди рд▓рдХреНрд╖рдгрдВ рд╕реБрдЦрджреБрдГрдЦрдпреЛрдГрее',
        translation: 'Everything that is in otherтАЩs control is painful. All that is in self-control is happiness. This is the definition of happiness and pain in short.тАЛ'
    },
];

// Function to display a random quote
function displayRandomQuote() {
    const randomIndex = Math.floor(Math.random() * quotes.length);
    const randomQuote = quotes[randomIndex];

    const quoteContainer = document.querySelector('.quote');
    quoteContainer.innerHTML = `
        <p class="sanskrit-text"><strong>${randomQuote.sanskrit}</strong></p>
        <p class="translation-text">${randomQuote.translation}</p>
    `;

    adjustFontSize(quoteContainer);
}

// Function to adjust the font size of the entire container
function adjustFontSize(container) {
    let sanskritFontSize = 28; // Starting font size for Sanskrit
    let englishFontSize = 16; // Starting font size for translation

    const sanskritText = container.querySelector('.sanskrit-text');
    const translationText = container.querySelector('.translation-text');

    sanskritText.style.fontSize = `${sanskritFontSize}px`;
    translationText.style.fontSize = `${englishFontSize}px`;

    // Decrease font sizes if the content overflows the container
    while (container.scrollHeight > container.clientHeight && sanskritFontSize > 20 && englishFontSize > 12) {
        sanskritFontSize -= 1;
        englishFontSize -= 1;
        sanskritText.style.fontSize = `${sanskritFontSize}px`;
        translationText.style.fontSize = `${englishFontSize}px`;
    }
}

// Call the function to display a random quote when the page loads
window.onload = displayRandomQuote;